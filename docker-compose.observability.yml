# Docker Compose for Observability Stack
# Monitoring, logging, and tracing for ADO development and production

version: '3.8'

services:
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ado-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.0.3
    container_name: ado-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_me
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: ado-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: ado-promtail
    volumes:
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail_data:/tmp/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - loki

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47.0
    container_name: ado-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.82.0
    container_name: ado-otelcol
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
    volumes:
      - ./monitoring/otel/otelcol.yml:/etc/otelcol/config.yaml:ro
    command: ["--config=/etc/otelcol/config.yaml"]
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - jaeger
      - prometheus

  # AlertManager - Alert handling
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ado-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ado-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - observability
    restart: unless-stopped

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: ado-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - observability
    restart: unless-stopped

  # Redis - For caching and session storage (if needed)
  redis:
    image: redis:7.0-alpine
    container_name: ado-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./monitoring/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - For persistent storage (if needed)
  postgres:
    image: postgres:15-alpine
    container_name: ado-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=ado_monitoring
      - POSTGRES_USER=ado_user
      - POSTGRES_PASSWORD=secure_password_change_me
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ado_user -d ado_monitoring"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ADO Application (for development/testing)
  ado-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ado-application
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ado_cache:/app/.ado/cache
    environment:
      - ADO_LOG_LEVEL=DEBUG
      - ADO_METRICS_ENABLED=true
      - ADO_TRACING_ENABLED=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc_dir
      - DATABASE_URL=postgresql://ado_user:secure_password_change_me@postgres:5432/ado_monitoring
      - REDIS_URL=redis://redis:6379/0
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - otelcol
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  observability:
    driver: bridge
    name: ado-observability

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  promtail_data:
    driver: local
  alertmanager_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  ado_cache:
    driver: local

# Profiles for different deployment scenarios
profiles:
  # Development profile - includes all services
  development:
    services: [prometheus, grafana, loki, promtail, jaeger, otelcol, alertmanager, node-exporter, cadvisor, redis, postgres, ado-app]
  
  # Production profile - optimized for production
  production:
    services: [prometheus, grafana, loki, promtail, jaeger, otelcol, alertmanager, node-exporter, cadvisor]
  
  # Minimal profile - basic monitoring only
  minimal:
    services: [prometheus, grafana, node-exporter]
  
  # Testing profile - for CI/CD testing
  testing:
    services: [prometheus, loki, jaeger, otelcol, redis, postgres]

# Health check and dependency management
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

x-logging-defaults: &logging-defaults
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "3"
    labels: "service,environment"

# Apply logging configuration to all services
x-default-logging:
  logging: *logging-defaults