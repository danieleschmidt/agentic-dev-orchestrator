name: Continuous Deployment

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (optional)'
        required: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run full test suite
      run: pytest tests/ -v --cov=. --cov-report=term-missing
    
    - name: Run security checks
      run: |
        bandit -r . -x tests/
        safety check
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${{ github.event.release.tag_name }}
        elif [[ ${{ github.ref }} == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Deploying version: ${VERSION}"

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: validate
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
        twine check dist/*
    
    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
    
    - name: Publish to PyPI
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Create GitHub release assets
      if: github.event_name == 'release'
      run: |
        gh release upload ${{ needs.validate.outputs.version }} dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-publish:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, build-and-publish]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [validate, build-and-publish, docker-publish]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-publish.result == 'success' && needs.docker-publish.result == 'success'
      run: |
        echo "üöÄ Successfully deployed version ${{ needs.validate.outputs.version }}"
        echo "üì¶ Package: https://pypi.org/project/agentic-dev-orchestrator/"
        echo "üê≥ Docker: ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}"
    
    - name: Notify on failure
      if: needs.build-and-publish.result == 'failure' || needs.docker-publish.result == 'failure'
      run: |
        echo "‚ùå Deployment failed for version ${{ needs.validate.outputs.version }}"
        exit 1