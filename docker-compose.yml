# Docker Compose configuration for Agentic Development Orchestrator
# Provides complete development and testing environment

version: '3.8'

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  ado-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volume Configuration
# =============================================================================
volumes:
  # Persistent data volumes
  ado-data:
    driver: local
  ado-cache:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Development volumes
  ado-coverage:
    driver: local
  ado-logs:
    driver: local

# =============================================================================
# Service Definitions
# =============================================================================
services:

  # ---------------------------------------------------------------------------
  # ADO Core Services
  # ---------------------------------------------------------------------------
  
  # Main ADO application (development)
  ado-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: "${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}"
        VCS_REF: "${VCS_REF:-$(git rev-parse --short HEAD)}"
        VERSION: "${VERSION:-0.1.0}"
    container_name: ado-dev
    hostname: ado-dev
    restart: unless-stopped
    environment:
      - PYTHON_ENV=development
      - ADO_LOG_LEVEL=DEBUG
      - TESTING=false
      - DATABASE_URL=postgresql://ado:ado_password@postgres:5432/ado_dev
      - REDIS_URL=redis://redis:6379/0
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      # Source code (for development)
      - .:/app
      # Persistent data
      - ado-data:/app/data
      - ado-cache:/app/.ado/cache
      - ado-logs:/app/.ado/logs
      # Coverage and test results
      - ado-coverage:/app/coverage
    ports:
      - "8080:8080"   # Health check / API
      - "9090:9090"   # Prometheus metrics
    networks:
      - ado-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import ado; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ADO production container
  ado-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ado-prod
    hostname: ado-prod
    restart: unless-stopped
    environment:
      - PYTHON_ENV=production
      - ADO_LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://ado:ado_password@postgres:5432/ado_prod
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ado-data:/app/data
      - ado-cache:/app/.ado/cache
      - ado-logs:/app/.ado/logs
    ports:
      - "8081:8080"
      - "9091:9090"
    networks:
      - ado-network
    depends_on:
      - postgres
      - redis
    profiles:
      - production

  # ADO testing container
  ado-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: ado-test
    hostname: ado-test
    environment:
      - PYTHON_ENV=testing
      - ADO_LOG_LEVEL=DEBUG
      - TESTING=true
      - DATABASE_URL=postgresql://ado:ado_password@postgres:5432/ado_test
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - .:/app
      - ado-coverage:/app/coverage
      - ./test-results:/app/test-results
    networks:
      - ado-network
    depends_on:
      - postgres
      - redis
    profiles:
      - testing
    command: ["pytest", "-v", "--cov=.", "--cov-report=html:/app/coverage"]

  # ---------------------------------------------------------------------------
  # Supporting Services
  # ---------------------------------------------------------------------------

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ado-postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ado
      POSTGRES_PASSWORD: ado_password
      POSTGRES_DB: ado_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ado-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ado"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ado-redis
    hostname: redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - ado-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ---------------------------------------------------------------------------
  # Development Tools
  # ---------------------------------------------------------------------------

  # Jupyter Lab for data analysis and experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ado-jupyter
    hostname: jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=ado-development
    volumes:
      - .:/app
      - ado-data:/app/data
    ports:
      - "8888:8888"
    networks:
      - ado-network
    profiles:
      - development
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]

  # Documentation server
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: docs
    container_name: ado-docs
    hostname: docs
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    networks:
      - ado-network
    profiles:
      - development

  # ---------------------------------------------------------------------------
  # Monitoring and Observability
  # ---------------------------------------------------------------------------

  # Prometheus metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ado-prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9092:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - ado-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ado-grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ado_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - ado-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # ---------------------------------------------------------------------------
  # Testing and Quality Tools
  # ---------------------------------------------------------------------------

  # SonarQube for code quality analysis
  sonarqube:
    image: sonarqube:community
    container_name: ado-sonarqube
    hostname: sonarqube
    restart: unless-stopped
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_JDBC_USERNAME=ado
      - SONAR_JDBC_PASSWORD=ado_password
    volumes:
      - ./quality/sonarqube/data:/opt/sonarqube/data
      - ./quality/sonarqube/logs:/opt/sonarqube/logs
      - ./quality/sonarqube/extensions:/opt/sonarqube/extensions
    ports:
      - "9000:9000"
    networks:
      - ado-network
    profiles:
      - quality
    depends_on:
      - postgres

  # ---------------------------------------------------------------------------
  # Utility Services
  # ---------------------------------------------------------------------------

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: ado-nginx
    hostname: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ado-network
    profiles:
      - production
    depends_on:
      - ado-prod

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ado-mailhog
    hostname: mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ado-network
    profiles:
      - development

  # Minio for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: ado-minio
    hostname: minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=ado_admin
      - MINIO_ROOT_PASSWORD=ado_admin_password
    volumes:
      - ./data/minio:/data
    ports:
      - "9001:9000"
      - "9002:9001"
    networks:
      - ado-network
    profiles:
      - storage
    command: server /data --console-address ":9001"

# =============================================================================
# Development Profiles
# =============================================================================

# Default services (development)
# docker-compose up

# Production services
# docker-compose --profile production up

# Testing services
# docker-compose --profile testing up

# Full development environment
# docker-compose --profile development up

# Monitoring stack
# docker-compose --profile monitoring up

# Quality tools
# docker-compose --profile quality up

# All services
# docker-compose --profile development --profile monitoring --profile quality up