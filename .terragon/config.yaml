# Terragon Autonomous SDLC Configuration
# Repository: agentic-dev-orchestrator
# Maturity Level: ADVANCED
# Last Updated: 2025-08-01

metadata:
  repository_name: "agentic-dev-orchestrator"
  maturity_level: "advanced"
  primary_language: "python"
  framework: "cli-application"
  last_assessment: "2025-08-01T00:00:00Z"
  assessment_version: "1.0.0"

# Value Discovery & Scoring Configuration
scoring:
  weights:
    # Advanced repository weights - focus on optimization and modernization
    wsjf: 0.5           # Business value prioritization
    ice: 0.1            # Impact/Confidence/Ease for features
    technicalDebt: 0.3  # High focus on debt reduction in mature codebase
    security: 0.1       # Maintain security posture
  
  thresholds:
    minScore: 15.0        # Higher bar for advanced repos
    maxRisk: 0.7          # Lower risk tolerance
    securityBoost: 2.0    # Security issues get priority
    complianceBoost: 1.8  # Compliance requirements
    modernizationBoost: 1.5 # Technology updates

  # Advanced scoring factors
  factors:
    hotspotMultiplier: 1.0-5.0    # Based on code churn vs complexity
    businessAlignmentWeight: 0.3   # Strategic alignment
    architecturalImpactWeight: 0.2 # System-wide improvements
    performanceImpactWeight: 0.2   # Performance optimizations
    maintainabilityWeight: 0.3     # Long-term maintenance

# Discovery Sources Configuration
discovery:
  sources:
    enabled:
      - gitHistory         # Commit analysis for patterns
      - staticAnalysis     # Code quality and complexity
      - issueTrackers      # GitHub issues and PRs
      - vulnerabilityDatabases # Security databases
      - performanceMonitoring  # Performance metrics
      - dependencyTracking # Package updates
      - architecturalAnalysis # Design pattern analysis
      - technicalDebtTracking # Debt accumulation
    
    intervals:
      gitHistory: "1h"           # Frequent commit analysis
      staticAnalysis: "6h"       # Regular code scanning
      vulnerabilityDatabases: "1h" # Security monitoring
      dependencyTracking: "24h"  # Daily dependency checks
      architecturalAnalysis: "7d" # Weekly architecture review
  
  tools:
    staticAnalysis:
      - ruff          # Python linting
      - mypy          # Type checking
      - bandit        # Security scanning
      - radon         # Complexity metrics
      - vulture       # Dead code detection
    
    security:
      - bandit        # Python security linting
      - safety        # Dependency vulnerability scanning
      - pip-audit     # Package audit
      - semgrep       # Security pattern detection
    
    performance:
      - pytest-benchmark # Performance testing
      - memory-profiler  # Memory analysis
      - py-spy          # Performance profiling
    
    dependencies:
      - pip-audit       # Security audit
      - pip-check       # Dependency conflicts
      - pipdeptree      # Dependency tree analysis

# Execution Configuration
execution:
  constraints:
    maxConcurrentTasks: 1     # Sequential execution for stability
    maxExecutionTime: "2h"    # Reasonable time limit
    
  quality_gates:
    minTestCoverage: 85       # High coverage requirement
    maxComplexity: 10         # Cyclomatic complexity limit
    performanceRegression: 5   # Max 5% performance degradation
    securityViolations: 0     # Zero tolerance for new security issues
    
  rollback_triggers:
    - testFailure
    - buildFailure 
    - securityViolation
    - performanceRegression
    - dependencyConflict
    - architecturalViolation

# Value Tracking Metrics
metrics:
  track:
    - technicalDebtReduction    # Debt reduction percentage
    - codeQualityImprovement   # Quality score trends
    - securityPosture          # Security score improvements
    - performanceOptimization  # Performance gains
    - architecturalHealth      # Design pattern adherence
    - modernizationProgress    # Technology stack updates
    - maintainabilityIndex     # Code maintainability
    - businessValueDelivery    # Feature delivery impact
  
  reporting:
    frequency: "daily"
    format: ["json", "markdown"]
    includeProjections: true
    includeRecommendations: true

# Integration Configuration
integrations:
  github:
    enabled: true
    features:
      - issueTracking
      - pullRequestAnalysis
      - workflowAnalysis
      - dependencyAlerts
      - securityAlerts
  
  monitoring:
    prometheus:
      enabled: true
      metrics_endpoint: "/metrics"
      custom_metrics:
        - technical_debt_score
        - code_quality_index
        - security_posture_score
        - performance_index

# Advanced Patterns for ADVANCED repositories
advanced_patterns:
  optimization_focus:
    - performanceOptimization
    - resourceEfficiency
    - algorithmicImprovements
    - cacheOptimization
    - concurrencyImprovements
  
  modernization_priorities:
    - pythonVersionUpgrade      # Modern Python features
    - dependencyModernization   # Latest stable versions  
    - architecturalRefactoring  # Design pattern updates
    - apiModernization         # REST/GraphQL improvements
    - observabilityEnhancement # Advanced monitoring
  
  governance_requirements:
    - complianceAutomation     # Regulatory compliance
    - auditTrailMaintenance    # Change tracking
    - policyEnforcement        # Governance policies
    - riskAssessment          # Continuous risk evaluation
    - changeImpactAnalysis    # Change effect prediction

# Learning and Adaptation
learning:
  enabled: true
  retain_history: "1y"        # Keep learning data for analysis
  adaptation_frequency: "weekly" # Model tuning frequency
  confidence_threshold: 0.8   # Execution confidence minimum
  
  feedback_sources:
    - executionOutcomes        # Success/failure patterns
    - performanceMetrics       # Performance impact data
    - userFeedback            # Manual intervention points
    - businessMetrics         # Business outcome correlation