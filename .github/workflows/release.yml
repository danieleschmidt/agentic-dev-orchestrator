name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip build twine
        pip install -e .[dev]
    
    - name: Run tests before release
      run: |
        pytest --cov=. --cov-fail-under=80
        ruff check .
        mypy .
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Create release configuration
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            ["@semantic-release/commit-analyzer", {
              "preset": "conventionalcommits",
              "releaseRules": [
                {"type": "feat", "release": "minor"},
                {"type": "fix", "release": "patch"},
                {"type": "perf", "release": "patch"},
                {"type": "docs", "release": false},
                {"type": "style", "release": false},
                {"type": "refactor", "release": "patch"},
                {"type": "test", "release": false},
                {"type": "build", "release": "patch"},
                {"type": "ci", "release": false},
                {"type": "chore", "release": false},
                {"breaking": true, "release": "major"}
              ]
            }],
            "@semantic-release/release-notes-generator",
            ["@semantic-release/changelog", {
              "changelogFile": "CHANGELOG.md"
            }],
            ["@semantic-release/github", {
              "assets": [
                {"path": "dist/*.whl", "label": "Python Wheel"},
                {"path": "dist/*.tar.gz", "label": "Source Distribution"}
              ]
            }],
            ["@semantic-release/git", {
              "assets": ["CHANGELOG.md", "package.json", "pyproject.toml"],
              "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
            }]
          ]
        }
        EOF
    
    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release
        echo "released=$?" >> $GITHUB_OUTPUT

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == '0'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == '0'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  autonomous-post-release:
    name: Autonomous Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [release, publish-pypi]
    if: needs.release.outputs.released == '0'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML requests
    
    - name: Update value discovery post-release
      run: |
        python3 .terragon/value-engine.py
    
    - name: Create release announcement
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const version = '${{ needs.release.outputs.version }}';
          const tag = '${{ needs.release.outputs.tag }}';
          
          // Read the latest value metrics
          let valueMetrics = {};
          try {
            valueMetrics = JSON.parse(fs.readFileSync('.terragon/value-metrics.json', 'utf8'));
          } catch (error) {
            console.log('Could not read value metrics');
          }
          
          const body = `# ðŸš€ ADO ${version} Released!\n\n` +
            `The Agentic Development Orchestrator has been updated with new features and improvements.\n\n` +
            `## ðŸ“ˆ Value Discovery Metrics\n` +
            `- **Total Opportunities**: ${valueMetrics.total_opportunities || 'N/A'}\n` +
            `- **High Impact Items**: ${valueMetrics.high_impact_count || 0}\n` +
            `- **Estimated Value**: ${valueMetrics.total_estimated_effort || 0} hours\n\n` +
            `## ðŸ”— Links\n` +
            `- [Release Notes](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tag})\n` +
            `- [PyPI Package](https://pypi.org/project/agentic-dev-orchestrator/${version}/)\n` +
            `- [Docker Image](https://ghcr.io/${context.repo.owner}/${context.repo.repo}:${version})\n\n` +
            `---\n*Auto-generated by Terragon Autonomous SDLC*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `[RELEASE] ADO ${version} - Autonomous Value Discovery Update`,
            body: body,
            labels: ['release', 'autonomous', 'announcement']
          });