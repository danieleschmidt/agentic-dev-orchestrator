# Automated Release Pipeline
# Semantic versioning, changelog generation, and package publishing

name: Release Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options: ['patch', 'minor', 'major']

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  # Automated release with semantic-release
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository == 'terragon-labs/agentic-dev-orchestrator'
    
    outputs:
      released: ${{ steps.semantic.outputs.released }}
      version: ${{ steps.semantic.outputs.version }}
      tag: ${{ steps.semantic.outputs.tag }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install semantic-release dependencies
      run: npm ci
    
    - name: Run semantic-release
      id: semantic
      run: |
        npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Build and publish Python package
  pypi-release:
    name: PyPI Release
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.release.outputs.tag }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Generate SBOM for release
      run: |
        pip install cyclonedx-bom
        cyclonedx-py -o ado-release-sbom.json
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ needs.release.outputs.version }}
        path: |
          dist/
          ado-release-sbom.json

  # Build and publish Docker images
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.release.outputs.tag }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ needs.release.outputs.version }}

  # Generate release documentation
  docs-release:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [release, pypi-release]
    if: needs.release.outputs.released == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.release.outputs.tag }}
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Build documentation
      run: |
        mkdocs build
        sphinx-build -b html docs docs/_build/html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: ado-docs.terragonlabs.com

  # Security scanning for releases
  release-security:
    name: Release Security Scan
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: needs.release.outputs.released == 'true'
    
    steps:
    - name: Run Trivy vulnerability scanner on release image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}'
        format: 'sarif'
        output: 'trivy-release-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-release-results.sarif'

  # Post-release notifications
  notify:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [release, pypi-release, docker-release, docs-release]
    if: needs.release.outputs.released == 'true'
    
    steps:
    - name: Create release announcement
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: '${{ needs.release.outputs.tag }}'
          });
          
          const announcement = `
          🎉 **ADO ${{ needs.release.outputs.version }} Released!**
          
          📦 **PyPI**: https://pypi.org/project/agentic-dev-orchestrator/${{ needs.release.outputs.version }}/
          🐳 **Docker**: \`ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}\`
          📚 **Documentation**: https://ado-docs.terragonlabs.com
          
          ${release.body}
          `;
          
          // Create discussion in announcements category
          await github.rest.teams.addOrUpdateProjectPermissionsInOrg({
            org: context.repo.owner,
            team_slug: 'maintainers',
            project_id: process.env.PROJECT_ID,
            permission: 'admin'
          });
    
    - name: Update project status
      run: |
        echo "Release ${{ needs.release.outputs.version }} completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "📦 PyPI: https://pypi.org/project/agentic-dev-orchestrator/${{ needs.release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "🐳 Docker: ghcr.io/${{ github.repository }}:${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY