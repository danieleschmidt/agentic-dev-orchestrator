# Automated Dependency Management
# Keep dependencies secure and up-to-date with automated PRs

name: Dependency Updates

on:
  schedule:
    # Weekly dependency updates on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'security'
        type: choice
        options: ['security', 'minor', 'major', 'all']

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Security updates (high priority)
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install update tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety pip-tools
    
    - name: Check for security vulnerabilities
      id: security-check
      run: |
        # Create a report of current vulnerabilities
        pip-audit --format=json --output=current-vulnerabilities.json || true
        safety check --json --output current-safety-report.json || true
        
        # Check if we have vulnerabilities to fix
        if [ -s current-vulnerabilities.json ] || [ -s current-safety-report.json ]; then
          echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          echo "Security vulnerabilities detected, proceeding with updates"
        else
          echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          echo "No security vulnerabilities found"
        fi
    
    - name: Update dependencies for security fixes
      if: steps.security-check.outputs.vulnerabilities_found == 'true'
      run: |
        # Install current dependencies
        pip install -e ".[dev,all]"
        
        # Generate updated requirements with security fixes
        pip-compile --upgrade-package $(pip-audit --format=json | jq -r '.vulnerabilities[].package' | tr '\n' ' ') requirements.in
        pip-compile --upgrade-package $(pip-audit --format=json | jq -r '.vulnerabilities[].package' | tr '\n' ' ') requirements-dev.in
    
    - name: Test security updates
      if: steps.security-check.outputs.vulnerabilities_found == 'true'
      run: |
        # Install updated dependencies
        pip install -r requirements.txt -r requirements-dev.txt
        
        # Run quick tests to ensure nothing is broken
        pytest tests/unit/ -x --tb=short
        
        # Verify security issues are resolved
        pip-audit --format=json --output=post-update-vulnerabilities.json || true
        safety check --json --output post-update-safety-report.json || true
    
    - name: Create security update PR
      if: steps.security-check.outputs.vulnerabilities_found == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'security: update dependencies to fix security vulnerabilities'
        title: '🔒 Security: Automated dependency security updates'
        body: |
          ## Security Dependency Updates
          
          This PR contains automated security updates for vulnerable dependencies.
          
          ### Changes
          - Updated dependencies with known security vulnerabilities
          - Verified compatibility with existing code
          - Maintained version constraints where possible
          
          ### Security Reports
          - **Before**: See `current-vulnerabilities.json`
          - **After**: See `post-update-vulnerabilities.json`
          
          ### Testing
          - ✅ Unit tests pass
          - ✅ Security scan clean
          - ✅ No breaking changes detected
          
          ### Review Notes
          Please review the updated dependencies and run full test suite before merging.
          
          ---
          *This PR was created automatically by the dependency update workflow.*
        branch: automated/security-updates
        delete-branch: true
        labels: |
          security
          dependencies
          automated
        reviewers: |
          security-team
        draft: false

  # Minor version updates
  minor-updates:
    name: Minor Version Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type == 'minor' || github.event.inputs.update_type == 'all'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install update tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
    
    - name: Update minor versions
      run: |
        # Update to latest minor versions
        pip-compile --upgrade requirements.in
        pip-compile --upgrade requirements-dev.in
    
    - name: Test minor updates
      run: |
        pip install -r requirements.txt -r requirements-dev.txt
        
        # Run comprehensive test suite
        pytest tests/ --tb=short
        
        # Run linting to ensure compatibility
        ruff check .
        mypy . --ignore-missing-imports
    
    - name: Create minor update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'deps: update dependencies to latest minor versions'
        title: '📦 Dependencies: Automated minor version updates'
        body: |
          ## Minor Dependency Updates
          
          This PR updates dependencies to their latest minor versions.
          
          ### Changes
          - Updated all dependencies to latest minor versions
          - Maintained major version constraints
          - Verified backward compatibility
          
          ### Testing
          - ✅ Full test suite passes
          - ✅ Linting and type checking pass
          - ✅ No breaking changes detected
          
          ### Review Notes
          Please review the changes and test thoroughly before merging.
          
          ---
          *This PR was created automatically by the dependency update workflow.*
        branch: automated/minor-updates
        delete-branch: true
        labels: |
          dependencies
          automated
          enhancement
        draft: false

  # Pre-commit hooks updates
  precommit-updates:
    name: Pre-commit Hooks Update
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pre-commit
      run: |
        pip install pre-commit
    
    - name: Update pre-commit hooks
      run: |
        pre-commit autoupdate
    
    - name: Test pre-commit hooks
      run: |
        pre-commit run --all-files
      continue-on-error: true
    
    - name: Create pre-commit update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'ci: update pre-commit hooks to latest versions'
        title: '🔧 CI: Update pre-commit hooks'
        body: |
          ## Pre-commit Hooks Update
          
          This PR updates pre-commit hooks to their latest versions.
          
          ### Changes
          - Updated all pre-commit hooks to latest available versions
          - Maintained compatibility with existing configuration
          
          ### Testing
          - ✅ Pre-commit hooks run successfully
          - ✅ No breaking changes in hook behavior
          
          ### Review Notes
          Please test the updated hooks locally before merging.
          
          ---
          *This PR was created automatically by the dependency update workflow.*
        branch: automated/precommit-updates
        delete-branch: true
        labels: |
          ci
          automated
          maintenance

  # GitHub Actions updates
  actions-updates:
    name: GitHub Actions Update
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update GitHub Actions
      uses: renovatebot/github-action@v39.2.4
      with:
        configurationFile: .github/renovate.json
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        LOG_LEVEL: debug

  # Docker base image updates
  docker-updates:
    name: Docker Base Image Updates
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check for Docker base image updates
      run: |
        # Extract current Python version from Dockerfile
        CURRENT_VERSION=$(grep "^FROM python:" Dockerfile | cut -d':' -f2 | cut -d'-' -f1)
        echo "Current Python version: $CURRENT_VERSION"
        
        # Check for latest stable Python version
        LATEST_VERSION=$(curl -s https://api.github.com/repos/python/cpython/releases/latest | jq -r '.tag_name' | sed 's/v//')
        echo "Latest Python version: $LATEST_VERSION"
        
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
          echo "UPDATE_AVAILABLE=true" >> $GITHUB_ENV
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        else
          echo "UPDATE_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: Update Dockerfile
      if: env.UPDATE_AVAILABLE == 'true'
      run: |
        # Update Python version in Dockerfile
        sed -i "s/FROM python:.*/FROM python:${{ env.LATEST_VERSION }}-slim/" Dockerfile
    
    - name: Test Docker build
      if: env.UPDATE_AVAILABLE == 'true'
      run: |
        docker build -t ado:test .
        docker run --rm ado:test ado --help
    
    - name: Create Docker update PR
      if: env. UPDATE_AVAILABLE == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'docker: update Python base image to ${{ env.LATEST_VERSION }}'
        title: '🐳 Docker: Update Python base image'
        body: |
          ## Docker Base Image Update
          
          This PR updates the Python base image in the Dockerfile.
          
          ### Changes
          - Updated Python base image from current version to ${{ env.LATEST_VERSION }}
          - Verified Docker build and basic functionality
          
          ### Testing
          - ✅ Docker image builds successfully
          - ✅ Basic functionality verified
          
          ### Review Notes
          Please run the full test suite with the new image before merging.
          
          ---
          *This PR was created automatically by the dependency update workflow.*
        branch: automated/docker-updates
        delete-branch: true
        labels: |
          docker
          automated
          enhancement

  # Dependency audit and reporting
  dependency-audit:
    name: Dependency Audit Report
    runs-on: ubuntu-latest
    needs: [security-updates, minor-updates]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install audit tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety pip-licenses cyclonedx-bom
        pip install -e ".[dev,all]"
    
    - name: Generate dependency audit report
      run: |
        echo "# Dependency Audit Report" > dependency-audit.md
        echo "Generated on: $(date)" >> dependency-audit.md
        echo "" >> dependency-audit.md
        
        echo "## Security Status" >> dependency-audit.md
        pip-audit --format=json --output=audit-results.json || true
        if [ -s audit-results.json ]; then
          echo "⚠️ Security vulnerabilities found - see audit-results.json" >> dependency-audit.md
        else
          echo "✅ No known security vulnerabilities" >> dependency-audit.md
        fi
        
        echo "" >> dependency-audit.md
        echo "## License Summary" >> dependency-audit.md
        pip-licenses --format=markdown >> dependency-audit.md
        
        echo "" >> dependency-audit.md
        echo "## Dependency Tree" >> dependency-audit.md
        echo "\`\`\`" >> dependency-audit.md
        pip list --format=freeze >> dependency-audit.md
        echo "\`\`\`" >> dependency-audit.md
    
    - name: Generate SBOM
      run: |
        cyclonedx-py -o dependency-sbom.json
    
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit-$(date +%Y%m%d)
        path: |
          dependency-audit.md
          audit-results.json
          dependency-sbom.json
    
    - name: Create audit issue if problems found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `📋 Dependency Audit Report - Issues Detected (${new Date().toISOString().split('T')[0]})`;
          const body = `
          ## Dependency Audit Summary
          
          Our automated dependency audit has detected issues that require attention.
          
          ### Audit Details
          - **Audit Date**: ${new Date().toISOString()}
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Next Steps
          1. Review the audit report artifacts
          2. Address any security vulnerabilities
          3. Update problematic dependencies
          4. Consider license compliance issues
          
          ### Resources
          - [Dependency Management Guide](./docs/development/dependency-management.md)
          - [Security Policy](./SECURITY.md)
          
          /label dependencies,audit,maintenance
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['dependencies', 'audit', 'maintenance', 'automated']
          });