name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 02:00 UTC for dependency vulnerability scanning
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,all]
    
    - name: Run linting
      run: |
        ruff check .
        black --check .
        mypy .
    
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[security]
    
    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
    
    - name: Run Safety dependency vulnerability scanner
      run: |
        safety check --json --output safety-report.json
        safety check
    
    - name: Run pip-audit for dependency vulnerabilities
      run: |
        pip-audit --output-format=json --output-file=pip-audit-report.json
        pip-audit
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json  
          pip-audit-report.json

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[performance]
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ --benchmark-json=benchmark-results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ado:test .
    
    - name: Test Docker image
      run: |
        docker run --rm ado:test --version
        docker run --rm ado:test --help
    
    - name: Run container security scan
      uses: anchore/scan-action@v3
      with:
        image: ado:test
        fail-build: false
        severity-cutoff: high

  autonomous-value-discovery:
    name: Autonomous Value Discovery
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML
    
    - name: Run autonomous value discovery
      run: |
        python3 .terragon/value-engine.py
    
    - name: Check for value opportunities
      run: |
        if [ -f "AUTONOMOUS_VALUE_BACKLOG.md" ]; then
          echo "Value discovery completed successfully"
          head -20 AUTONOMOUS_VALUE_BACKLOG.md
        else
          echo "Value discovery failed"
          exit 1
        fi
    
    - name: Commit value backlog updates
      if: github.event_name == 'push'
      run: |
        git config --local user.email "noreply@terragonlabs.com"
        git config --local user.name "Terragon Autonomous Agent"
        git add AUTONOMOUS_VALUE_BACKLOG.md .terragon/value-metrics.json
        git diff --staged --quiet || git commit -m "chore: update autonomous value discovery results [skip ci]"
        git push

  dependency-update:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip pip-tools
    
    - name: Check for outdated dependencies
      run: |
        pip list --outdated --format=json > outdated-deps.json
        if [ -s outdated-deps.json ]; then
          echo "Outdated dependencies found:"
          cat outdated-deps.json
        else
          echo "All dependencies are up to date"
        fi
    
    - name: Create dependency update issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const outdated = JSON.parse(fs.readFileSync('outdated-deps.json', 'utf8'));
            if (outdated.length > 0) {
              const body = `# Dependency Updates Available\n\n` +
                `Found ${outdated.length} outdated dependencies:\n\n` +
                outdated.map(dep => `- **${dep.name}**: ${dep.version} â†’ ${dep.latest_version}`).join('\n') +
                `\n\n---\n*Auto-generated by Terragon Autonomous SDLC*`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AUTO] Dependency Updates Available (${new Date().toISOString().split('T')[0]})`,
                body: body,
                labels: ['dependencies', 'autonomous', 'maintenance']
              });
            }
          } catch (error) {
            console.log('No outdated dependencies or error reading file');
          }