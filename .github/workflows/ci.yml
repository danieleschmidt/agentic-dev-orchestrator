# Comprehensive CI Pipeline for Agentic Development Orchestrator
# Runs on pull requests and pushes to main branch

name: 🚀 Continuous Integration

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - '.dockerignore'
      - '.env.example'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - '.dockerignore'
      - '.env.example'
  workflow_dispatch:

# Ensure only one workflow runs at a time per branch
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================================================
  # Job 1: Code Quality Checks
  # ==========================================================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🎨 Check code formatting (Black)
      run: black --check --diff .

    - name: 📏 Check import sorting (isort)
      run: isort --check-only --diff .

    - name: 🔧 Lint code (Ruff)
      run: ruff check . --output-format=github

    - name: 🏷️  Type checking (MyPy)
      run: mypy . --show-error-codes

    - name: 📝 Check documentation format
      run: |
        markdownlint . --config .markdownlint.yml || true
        yamllint . --config-file .yamllint.yml

    - name: 🔒 Security scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true

    - name: 🛡️  Dependency security (Safety)
      run: |
        safety check --json --output safety-report.json || true
        pip-audit --output-format=json --output-file=pip-audit-report.json || true

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  # ==========================================================================
  # Job 2: Testing Matrix
  # ==========================================================================
  test:
    name: 🧪 Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🧪 Run unit tests
      run: |
        pytest tests/unit \
          --junitxml=junit/test-results-unit.xml \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80

    - name: 🔗 Run integration tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pytest tests/integration \
          --junitxml=junit/test-results-integration.xml \
          -m "not requires_network"

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          junit/
          htmlcov/
          coverage.xml
        retention-days: 30

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ==========================================================================
  # Job 3: Performance Tests
  # ==========================================================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: ⚡ Run performance tests
      run: |
        pytest tests/performance \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          --benchmark-sort=mean

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30

  # ==========================================================================
  # Job 4: Docker Build and Security Scan
  # ==========================================================================
  docker:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality]
    
    permissions:
      contents: read
      security-events: write
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️  Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================================================
  # Job 5: Documentation Build
  # ==========================================================================
  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 📖 Build documentation
      run: |
        mkdocs build --strict
        
    - name: 📤 Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/
        retention-days: 30

    - name: 🚀 Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # ==========================================================================
  # Job 6: End-to-End Tests
  # ==========================================================================
  e2e:
    name: 🔄 End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, docker]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ado_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🏃 Run E2E tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/ado_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        pytest tests/e2e \
          --junitxml=junit/test-results-e2e.xml \
          -v

    - name: 📊 Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: junit/
        retention-days: 30

  # ==========================================================================
  # Job 7: Build Verification
  # ==========================================================================
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, test]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🔨 Build package
      run: python -m build

    - name: ✅ Verify package
      run: twine check dist/*

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 30

  # ==========================================================================
  # Job 8: Dependency Review
  # ==========================================================================
  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-dependencies-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # ==========================================================================
  # Job 9: CodeQL Analysis
  # ==========================================================================
  codeql:
    name: 🔒 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [python]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: 🔨 Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  # ==========================================================================
  # Job 10: Status Check Summary
  # ==========================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: 
      - quality
      - test
      - performance
      - docker
      - docs
      - build
      - codeql
    if: always()

    steps:
    - name: ✅ Check all jobs status
      run: |
        if [[ "${{ needs.quality.result }}" != "success" || \
              "${{ needs.test.result }}" != "success" || \
              "${{ needs.performance.result }}" != "success" || \
              "${{ needs.docker.result }}" != "success" || \
              "${{ needs.docs.result }}" != "success" || \
              "${{ needs.build.result }}" != "success" || \
              "${{ needs.codeql.result }}" != "success" ]]; then
          echo "❌ One or more CI jobs failed"
          exit 1
        else
          echo "✅ All CI jobs passed successfully"
        fi

    - name: 🎉 Success notification
      if: success()
      run: |
        echo "🎉 CI pipeline completed successfully!"
        echo "✅ Code quality checks passed"
        echo "✅ All tests passed"
        echo "✅ Security scans completed"
        echo "✅ Documentation built"
        echo "✅ Package built and verified"