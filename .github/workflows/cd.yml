# Continuous Deployment Pipeline for Agentic Development Orchestrator
# Deploys on releases and main branch changes

name: 🚀 Continuous Deployment

on:
  release:
    types: [published]
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

# Ensure only one deployment runs at a time
concurrency:
  group: deploy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================================================
  # Job 1: Determine Deployment Strategy
  # ==========================================================================
  strategy:
    name: 📋 Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      version: ${{ steps.determine.outputs.version }}
      should_deploy: ${{ steps.determine.outputs.should_deploy }}
      deploy_to_pypi: ${{ steps.determine.outputs.deploy_to_pypi }}
      deploy_to_docker: ${{ steps.determine.outputs.deploy_to_docker }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🤔 Determine deployment strategy
      id: determine
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_to_pypi=true" >> $GITHUB_OUTPUT
          echo "deploy_to_docker=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.inputs.version || 'latest' }}" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_to_pypi=false" >> $GITHUB_OUTPUT
          echo "deploy_to_docker=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "version=latest" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "deploy_to_pypi=false" >> $GITHUB_OUTPUT
          echo "deploy_to_docker=true" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

    - name: 📝 Display strategy
      run: |
        echo "🎯 Deployment Strategy:"
        echo "   Environment: ${{ steps.determine.outputs.environment }}"
        echo "   Version: ${{ steps.determine.outputs.version }}"
        echo "   Should Deploy: ${{ steps.determine.outputs.should_deploy }}"
        echo "   Deploy to PyPI: ${{ steps.determine.outputs.deploy_to_pypi }}"
        echo "   Deploy to Docker: ${{ steps.determine.outputs.deploy_to_docker }}"

  # ==========================================================================
  # Job 2: Pre-deployment Checks
  # ==========================================================================
  pre-checks:
    name: ✅ Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: [strategy]
    if: needs.strategy.outputs.should_deploy == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: 🧪 Run critical tests
      run: |
        pytest tests/unit tests/integration \
          --maxfail=1 \
          --tb=short \
          -x

    - name: 🔒 Security scan
      run: |
        bandit -r . -f json -o bandit-report.json
        safety check

    - name: 📦 Verify package can be built
      run: |
        python -m build
        twine check dist/*

  # ==========================================================================
  # Job 3: Build and Push Docker Images
  # ==========================================================================
  docker-deploy:
    name: 🐳 Deploy Docker Images
    runs-on: ubuntu-latest
    needs: [strategy, pre-checks]
    if: needs.strategy.outputs.should_deploy == 'true' && needs.strategy.outputs.deploy_to_docker == 'true'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        target: [production, minimal]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️  Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
          suffix=-${{ matrix.target }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=${{ needs.strategy.outputs.version }}

    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          VERSION=${{ needs.strategy.outputs.version }}

  # ==========================================================================
  # Job 4: Deploy to PyPI
  # ==========================================================================
  pypi-deploy:
    name: 📦 Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [strategy, pre-checks]
    if: needs.strategy.outputs.should_deploy == 'true' && needs.strategy.outputs.deploy_to_pypi == 'true'
    environment: pypi
    
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🔨 Build package
      run: python -m build

    - name: ✅ Verify package
      run: twine check dist/*

    - name: 🚀 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://upload.pypi.org/legacy/

  # ==========================================================================
  # Job 5: Deploy to Staging Environment
  # ==========================================================================
  staging-deploy:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [strategy, pre-checks, docker-deploy]
    if: needs.strategy.outputs.should_deploy == 'true' && needs.strategy.outputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Configure kubectl
      uses: azure/setup-kubectl@v3
      if: false  # Disabled until k8s cluster is available

    - name: 🚀 Deploy to staging
      run: |
        echo "🎭 Deploying to staging environment..."
        echo "   Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.strategy.outputs.version }}-production"
        
        # Example deployment commands (customize based on your infrastructure)
        # kubectl set image deployment/ado-staging ado=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.strategy.outputs.version }}-production
        # kubectl rollout status deployment/ado-staging --timeout=300s

    - name: 🧪 Run smoke tests
      run: |
        echo "🧪 Running smoke tests against staging..."
        # Add smoke test commands here
        # curl -f https://staging.ado.example.com/health || exit 1

    - name: 📊 Update deployment status
      run: |
        echo "✅ Staging deployment completed successfully"
        echo "🔗 Staging URL: https://staging.ado.example.com"

  # ==========================================================================
  # Job 6: Deploy to Production Environment
  # ==========================================================================
  production-deploy:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [strategy, pre-checks, docker-deploy]
    if: needs.strategy.outputs.should_deploy == 'true' && needs.strategy.outputs.environment == 'production'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Configure kubectl
      uses: azure/setup-kubectl@v3
      if: false  # Disabled until k8s cluster is available

    - name: 📊 Pre-deployment health check
      run: |
        echo "🏥 Checking production health before deployment..."
        # curl -f https://api.ado.example.com/health || echo "Current production not responding"

    - name: 🚀 Deploy to production (Blue-Green)
      run: |
        echo "🌟 Deploying to production environment..."
        echo "   Strategy: Blue-Green Deployment"
        echo "   Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.strategy.outputs.version }}-production"
        
        # Example blue-green deployment
        # kubectl set image deployment/ado-green ado=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.strategy.outputs.version }}-production
        # kubectl rollout status deployment/ado-green --timeout=600s

    - name: 🧪 Run production smoke tests
      run: |
        echo "🧪 Running production smoke tests..."
        # Add comprehensive smoke tests
        sleep 30  # Wait for deployment to stabilize
        # curl -f https://api.ado.example.com/health
        # curl -f https://api.ado.example.com/version

    - name: 🔄 Switch traffic to new version
      run: |
        echo "🔄 Switching traffic to new version..."
        # kubectl patch service ado-service -p '{"spec":{"selector":{"version":"green"}}}'

    - name: 🧹 Cleanup old version
      run: |
        echo "🧹 Cleaning up old version..."
        # kubectl scale deployment ado-blue --replicas=0

    - name: 📊 Update deployment status
      run: |
        echo "✅ Production deployment completed successfully"
        echo "🔗 Production URL: https://api.ado.example.com"

  # ==========================================================================
  # Job 7: Post-deployment Verification
  # ==========================================================================
  post-deploy:
    name: 🔍 Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [strategy, staging-deploy, production-deploy]
    if: always() && needs.strategy.outputs.should_deploy == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Verify deployment
      run: |
        if [[ "${{ needs.strategy.outputs.environment }}" == "staging" ]]; then
          echo "🎭 Verifying staging deployment..."
          ENDPOINT="https://staging.ado.example.com"
        else
          echo "🌟 Verifying production deployment..."
          ENDPOINT="https://api.ado.example.com"
        fi
        
        echo "🔗 Testing endpoint: $ENDPOINT"
        # curl -f $ENDPOINT/health
        # curl -f $ENDPOINT/version
        echo "✅ Deployment verification completed"

    - name: 📊 Run deployment tests
      run: |
        echo "🧪 Running post-deployment test suite..."
        # pytest tests/deployment --endpoint=$ENDPOINT

    - name: 📈 Update monitoring
      run: |
        echo "📈 Updating monitoring and alerting..."
        # Update Datadog, New Relic, or other monitoring services
        # curl -X POST "https://api.datadoghq.com/api/v1/events" \
        #   -H "Content-Type: application/json" \
        #   -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
        #   -d '{"title":"ADO Deployment","text":"Successfully deployed version ${{ needs.strategy.outputs.version }} to ${{ needs.strategy.outputs.environment }}"}'

  # ==========================================================================
  # Job 8: Rollback on Failure
  # ==========================================================================
  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [strategy, staging-deploy, production-deploy, post-deploy]
    if: failure() && needs.strategy.outputs.should_deploy == 'true'
    
    steps:
    - name: 🚨 Trigger rollback
      run: |
        echo "🚨 Deployment failed - initiating rollback..."
        
        if [[ "${{ needs.strategy.outputs.environment }}" == "production" ]]; then
          echo "🔄 Rolling back production deployment..."
          # kubectl rollout undo deployment/ado-green
          # kubectl patch service ado-service -p '{"spec":{"selector":{"version":"blue"}}}'
        else
          echo "🔄 Rolling back staging deployment..."
          # kubectl rollout undo deployment/ado-staging
        fi

    - name: 📊 Verify rollback
      run: |
        echo "✅ Rollback completed - verifying..."
        # Add rollback verification commands

    - name: 📢 Notify team
      run: |
        echo "📢 Notifying team of rollback..."
        # Send Slack/email notification about rollback

  # ==========================================================================
  # Job 9: Deployment Summary
  # ==========================================================================
  deploy-summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [strategy, pre-checks, docker-deploy, pypi-deploy, staging-deploy, production-deploy, post-deploy]
    if: always() && needs.strategy.outputs.should_deploy == 'true'
    
    steps:
    - name: 📋 Generate deployment summary
      run: |
        echo "📋 Deployment Summary"
        echo "===================="
        echo "🎯 Environment: ${{ needs.strategy.outputs.environment }}"
        echo "🏷️  Version: ${{ needs.strategy.outputs.version }}"
        echo "📅 Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo ""
        echo "📊 Job Results:"
        echo "   Pre-checks: ${{ needs.pre-checks.result }}"
        echo "   Docker Deploy: ${{ needs.docker-deploy.result }}"
        echo "   PyPI Deploy: ${{ needs.pypi-deploy.result }}"
        echo "   Staging Deploy: ${{ needs.staging-deploy.result }}"
        echo "   Production Deploy: ${{ needs.production-deploy.result }}"
        echo "   Post-deploy: ${{ needs.post-deploy.result }}"

    - name: ✅ Mark deployment success
      if: success()
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🚀 ADO v${{ needs.strategy.outputs.version }} is now live in ${{ needs.strategy.outputs.environment }}"

    - name: ❌ Mark deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "🔍 Please check the logs and investigate the issue."
        exit 1