# Advanced Security Scanning Pipeline
# Comprehensive security monitoring and vulnerability management

name: Security Scan

on:
  schedule:
    # Daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'Dockerfile'
      - '.github/workflows/security.yml'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options: ['quick', 'full', 'deep']

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep safety pip-audit
        pip install -e ".[dev]"
    
    # Bandit - Python security linter
    - name: Run Bandit security scan
      run: |
        bandit -r . -f sarif -o bandit-results.sarif
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    # Semgrep - Static analysis for multiple languages
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --sarif --output=semgrep-results.sarif .
        semgrep --config=auto --json --output=semgrep-report.json .
      continue-on-error: true
    
    # CodeQL Analysis
    - name: Initialize CodeQL
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'deep' || github.event_name == 'schedule'
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality
    
    - name: Perform CodeQL Analysis
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'deep' || github.event_name == 'schedule'
      uses: github/codeql-action/analyze@v2
    
    # Upload SARIF results
    - name: Upload SARIF results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          bandit-results.sarif
          semgrep-results.sarif
      continue-on-error: true
    
    - name: Archive security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sast-reports
        path: |
          bandit-report.json
          semgrep-report.json

  # Software Composition Analysis (SCA)
  sca-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit cyclonedx-bom
        pip install -e ".[dev,all]"
    
    # Safety - Known security vulnerabilities
    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json
        safety check --output safety-report.txt
      continue-on-error: true
    
    # pip-audit - Python package vulnerabilities
    - name: Run pip-audit scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=sarif --output=pip-audit-results.sarif
      continue-on-error: true
    
    # Generate Software Bill of Materials (SBOM)
    - name: Generate SBOM
      run: |
        cyclonedx-py -o ado-sbom.json
        cyclonedx-py -o ado-sbom.xml --format xml
    
    # Upload SARIF for pip-audit
    - name: Upload pip-audit SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: pip-audit-results.sarif
      continue-on-error: true
    
    - name: Archive SCA reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sca-reports
        path: |
          safety-report.json
          safety-report.txt
          pip-audit-report.json
          ado-sbom.json
          ado-sbom.xml

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image for scanning
      run: |
        docker build -t ado:security-scan .
    
    # Trivy - Container vulnerability scanner
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ado:security-scan'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
    
    # Docker Scout (if available)
    - name: Docker Scout CVE scan
      if: github.event.inputs.scan_type == 'deep' || github.event_name == 'schedule'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ado:security-scan
        sarif-file: docker-scout-results.sarif
      continue-on-error: true
    
    # Upload container security results
    - name: Upload container security SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-container-results.sarif
          trivy-fs-results.sarif
          docker-scout-results.sarif
      continue-on-error: true
    
    - name: Archive container scan reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: container-scan-reports
        path: |
          trivy-container-results.sarif
          trivy-fs-results.sarif
          docker-scout-results.sarif

  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install detect-secrets
      run: |
        pip install detect-secrets
    
    - name: Run detect-secrets scan
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline --force-use-all-plugins
        detect-secrets audit .secrets.baseline --report --fail-on-unaudited
      continue-on-error: true
    
    # TruffleHog for additional secrets detection
    - name: Run TruffleHog secrets scan
      if: github.event.inputs.scan_type == 'deep' || github.event_name == 'schedule'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

  # Infrastructure as Code Security
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'deep' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,github_actions
        output_format: sarif
        output_file_path: checkov-results.sarif
        download_external_modules: true
      continue-on-error: true
    
    - name: Upload Checkov SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif
      continue-on-error: true

  # Security Compliance Check
  compliance-check:
    name: Security Compliance
    runs-on: ubuntu-latest
    needs: [sast-scan, sca-scan, container-scan]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- âœ… SAST Scan: Completed" >> security-summary.md
        echo "- âœ… SCA Scan: Completed" >> security-summary.md
        echo "- âœ… Container Scan: Completed" >> security-summary.md
        echo "- âœ… Secrets Scan: Completed" >> security-summary.md
        
        if [ -d "security-reports/" ]; then
          echo "" >> security-summary.md
          echo "## Artifacts Generated" >> security-summary.md
          find security-reports/ -name "*.json" -o -name "*.sarif" -o -name "*.xml" | while read file; do
            echo "- $(basename "$file")" >> security-summary.md
          done
        fi
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Create security issue if vulnerabilities found
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸ”’ Daily Security Scan - Vulnerabilities Detected (${new Date().toISOString().split('T')[0]})`;
          const body = `
          ## Security Scan Results
          
          Our automated security scan has detected potential vulnerabilities that require attention.
          
          ### Scan Details
          - **Scan Date**: ${new Date().toISOString()}
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Next Steps
          1. Review the security scan artifacts
          2. Analyze identified vulnerabilities
          3. Apply necessary fixes or mitigations
          4. Update security baselines if needed
          
          ### Resources
          - [Security Policy](./SECURITY.md)
          - [Vulnerability Response Process](./docs/security/vulnerability-response.md)
          
          /label security,vulnerability
          /assign @security-team
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'vulnerability', 'automated']
          });

  # License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install license checking tools
      run: |
        pip install pip-licenses licensecheck
        pip install -e ".[dev,all]"
    
    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses-report.json
        pip-licenses --format=csv --output-file=licenses-report.csv
        licensecheck --file=requirements.txt > license-analysis.txt || true
    
    - name: Archive license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses-report.json
          licenses-report.csv
          license-analysis.txt