{
  "timestamp": "2025-08-04T04:04:41.233269",
  "scan_duration": 0.16686677932739258,
  "total_findings": 4,
  "critical_findings": 1,
  "high_findings": 1,
  "medium_findings": 2,
  "low_findings": 0,
  "info_findings": 0,
  "findings": [
    {
      "severity": "medium",
      "rule_id": "CRYPTO_001",
      "title": "Weak cryptographic hash",
      "description": "Using weak MD5 or SHA1 hash function",
      "file_path": "src/cache/cache_manager.py",
      "line_number": 123,
      "code_snippet": "key_hash = hashlib.md5(key.encode()).hexdigest()",
      "fix_suggestion": null
    },
    {
      "severity": "medium",
      "rule_id": "CRYPTO_002",
      "title": "Weak random number generation",
      "description": "Using random.random() for security purposes",
      "file_path": "src/security/scanner.py",
      "line_number": 115,
      "code_snippet": "\"description\": \"Using random.random() for security purposes\"",
      "fix_suggestion": null
    },
    {
      "severity": "high",
      "rule_id": "SECRET_001",
      "title": "Hardcoded password detected",
      "description": "Found potential hardcoded password in source code",
      "file_path": "tests/security/test_security_scanner.py",
      "line_number": 76,
      "code_snippet": "PASSWORD = \"super_secret_password\"",
      "fix_suggestion": null
    },
    {
      "severity": "critical",
      "rule_id": "INJECT_003",
      "title": "Code injection via eval",
      "description": "Using eval() with user input",
      "file_path": "tests/security/test_security_scanner.py",
      "line_number": 107,
      "code_snippet": "eval(user_input)  # B307: Use of eval()",
      "fix_suggestion": null
    }
  ],
  "scanned_files": [
    "ado.py",
    "autonomous_executor.py",
    "autonomous_sdlc_engine.py",
    "backlog_manager.py",
    "setup.py",
    "test_autonomous_executor.py",
    "test_backlog_manager.py",
    "test_packaging.py",
    "value_discovery_engine.py",
    "scripts/automate_maintenance.py",
    "scripts/check_imports.py",
    "scripts/collect_metrics.py",
    "scripts/generate_sbom.py",
    "scripts/repository_health_monitor.py",
    "scripts/validate_schemas.py",
    "src/__init__.py",
    "tests/__init__.py",
    "tests/conftest.py",
    "tests/test_template.py",
    "src/api/__init__.py",
    "src/api/server.py",
    "src/cache/__init__.py",
    "src/cache/cache_manager.py",
    "src/database/__init__.py",
    "src/database/connection.py",
    "src/repositories/__init__.py",
    "src/repositories/backlog_repository.py",
    "src/repositories/base_repository.py",
    "src/monitoring/health_monitor.py",
    "src/monitoring/__init__.py",
    "src/security/__init__.py",
    "src/security/scanner.py",
    "tests/e2e/__init__.py",
    "tests/integration/__init__.py",
    "tests/integration/test_api_endpoints.py",
    "tests/integration/test_github_integration.py",
    "tests/performance/__init__.py",
    "tests/performance/test_load_testing.py",
    "tests/performance/test_performance.py",
    "tests/security/test_security_scanner.py",
    "tests/unit/__init__.py",
    "tests/unit/test_ado_cli.py",
    "tests/unit/test_backlog_manager.py",
    "tests/unit/test_data_layer.py",
    "backlog.yml",
    "docker-compose.observability.yml",
    "docker-compose.yml",
    "mkdocs.yml",
    "github-workflows-template/ci.yml",
    "github-workflows-template/release.yml",
    "github-workflows-template/security.yml",
    "docs/workflows/examples/cd.yml",
    "docs/workflows/examples/ci.yml",
    "docs/workflows/examples/dependency-update.yml",
    "docs/workflows/examples/security.yml",
    "monitoring/prometheus/prometheus.yml",
    "monitoring/prometheus/rules/ado-alerts.yml",
    "SBOM.json",
    "package.json",
    "backlog/pip-installable.json",
    "backlog/sample-task.json",
    "backlog/test-coverage.json",
    "backlog/simple-task.json",
    "escalations/json-sample-task_escalation.json",
    "docs/status/latest.json",
    "docs/status/status_20250726_052551.json",
    "docs/status/status_20250726_052552.json",
    "docs/status/status_20250726_052554.json",
    "docs/status/status_20250726_052555.json",
    "docs/status/status_20250726_052556.json",
    "docs/status/status_20250726_052558.json",
    "docs/status/status_20250726_052559.json",
    "docs/status/status_20250726_052600.json",
    "docs/status/status_20250726_052602.json",
    "docs/status/status_20250726_052603.json",
    "docs/status/status_20250726_052604.json",
    "docs/status/status_20250726_052606.json",
    "docs/status/status_20250726_052607.json",
    "docs/status/status_20250726_052608.json",
    "docs/status/status_20250726_052609.json",
    "docs/status/status_20250726_052611.json",
    "docs/status/status_20250726_052612.json",
    "docs/status/status_20250726_052613.json",
    "docs/status/status_20250726_052615.json",
    "docs/status/status_20250726_052616.json",
    "docs/status/status_20250726_052617.json",
    "docs/status/status_20250726_052619.json",
    "docs/status/status_20250726_052620.json",
    "docs/status/status_20250726_052621.json",
    "docs/status/status_20250726_052623.json",
    "docs/status/status_20250726_052624.json",
    "docs/status/status_20250726_052625.json",
    "docs/status/status_20250726_052627.json",
    "docs/status/status_20250726_052628.json",
    "docs/status/status_20250726_052629.json",
    "docs/status/status_20250726_052631.json",
    "docs/status/status_20250726_052632.json",
    "docs/status/status_20250726_052634.json",
    "docs/status/status_20250726_052635.json",
    "docs/status/status_20250726_052636.json",
    "docs/status/status_20250726_052638.json",
    "docs/status/status_20250726_052639.json",
    "docs/status/status_20250726_052640.json",
    "docs/status/status_20250726_052641.json",
    "docs/status/status_20250726_052643.json",
    "docs/status/status_20250726_052644.json",
    "docs/status/status_20250726_052646.json",
    "docs/status/status_20250726_052647.json",
    "docs/status/status_20250726_052648.json",
    "docs/status/status_20250726_052650.json",
    "docs/status/status_20250726_052651.json",
    "docs/status/status_20250726_052652.json",
    "docs/status/status_20250726_052654.json",
    "docs/status/status_20250726_052655.json",
    "docs/status/status_20250726_052656.json",
    "docs/status/status_20250726_052658.json",
    "docs/status/status_20250726_052659.json",
    "docs/status/status_20250726_052700.json",
    "docs/status/status_20250726_052702.json",
    "docs/status/status_20250726_052703.json",
    "docs/status/status_20250726_052704.json",
    "docs/status/status_20250726_052706.json",
    "docs/status/status_20250726_052707.json",
    "docs/status/status_20250726_052708.json",
    "docs/status/status_20250726_052710.json",
    "docs/status/status_20250726_052711.json",
    "docs/status/status_20250726_052712.json",
    "docs/status/status_20250726_052714.json",
    "docs/status/status_20250726_052715.json",
    "docs/status/status_20250726_052716.json",
    "docs/status/status_20250726_052718.json",
    "docs/status/status_20250726_052719.json",
    "docs/status/status_20250726_052720.json",
    "docs/status/status_20250726_052722.json",
    "docs/status/status_20250726_052723.json",
    "docs/status/status_20250726_052724.json",
    "docs/status/status_20250726_052726.json",
    "docs/status/status_20250726_052727.json",
    "docs/status/status_20250726_052728.json",
    "docs/status/status_20250726_052729.json",
    "docs/status/status_20250726_052731.json",
    "docs/status/status_20250726_052732.json",
    "docs/status/status_20250726_052733.json",
    "docs/status/status_20250726_052735.json",
    "docs/status/status_20250726_052736.json",
    "docs/status/status_20250726_052737.json",
    "docs/status/status_20250726_052739.json",
    "docs/status/status_20250726_052740.json",
    "docs/status/status_20250726_052741.json",
    "docs/status/status_20250726_052743.json",
    "docs/status/status_20250726_052744.json",
    "docs/status/status_20250726_052745.json",
    "docs/status/status_20250726_052747.json",
    "docs/status/status_20250726_052748.json",
    "docs/status/status_20250726_052749.json",
    "docs/status/status_20250726_052751.json",
    "docs/status/status_20250726_123152.json",
    "docs/status/status_20250727_074754.json",
    "docs/status/last_execution.json",
    "docs/status/status_20250804_040121.json",
    "install-completions.sh",
    "scripts/run_automation.sh",
    "scripts/security_scan.sh"
  ]
}