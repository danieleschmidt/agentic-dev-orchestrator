version: '3.8'

services:
  sentiment-api:
    build:
      context: .
      dockerfile: docker/sentiment.Dockerfile
      target: production
    container_name: ado-sentiment-api
    ports:
      - "5000:5000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - SENTIMENT_CACHE_DIR=/app/.ado/cache
      - SENTIMENT_MAX_WORKERS=4
      - SENTIMENT_BATCH_SIZE=20
    volumes:
      - sentiment_cache:/app/.ado/cache
      - sentiment_logs:/app/logs
      - ./backlog:/app/backlog:ro
    networks:
      - ado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  sentiment-worker:
    build:
      context: .
      dockerfile: docker/sentiment.Dockerfile
      target: production
    container_name: ado-sentiment-worker
    command: ["python", "ado.py", "run"]
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - SENTIMENT_CACHE_DIR=/app/.ado/cache
      - WORKER_MODE=true
    volumes:
      - sentiment_cache:/app/.ado/cache
      - sentiment_logs:/app/logs
      - ./backlog:/app/backlog
    networks:
      - ado-network
    restart: unless-stopped
    depends_on:
      sentiment-api:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: ado-sentiment-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ado-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: ado-sentiment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/sentiment.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ado-network
    restart: unless-stopped
    depends_on:
      - sentiment-api
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  prometheus:
    image: prom/prometheus:latest
    container_name: ado-sentiment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-sentiment.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ado-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: ado-sentiment-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-sentiment.json:/etc/grafana/provisioning/dashboards/sentiment.json:ro
    networks:
      - ado-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  sentiment_cache:
    driver: local
  sentiment_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ado-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16